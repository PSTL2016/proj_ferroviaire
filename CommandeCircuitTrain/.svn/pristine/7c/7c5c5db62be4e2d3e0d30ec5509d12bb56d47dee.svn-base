package upmc.train.model.communication;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.TooManyListenersException;

import upmc.train.constantes.IConstantes;
import upmc.train.model.communication.exception.CommunicationUSBException;
import upmc.train.model.messages.IMessageListener;
import upmc.train.model.messages.MessageEvent;
import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;


public class CommunicationArduino implements SerialPortEventListener,ICommunication
{
	   //for containing the ports that will be found
    @SuppressWarnings("rawtypes")
	private Enumeration ports = null;
    //map the port names to CommPortIdentifiers
    @SuppressWarnings("rawtypes")
	private HashMap portMap = new HashMap();
    private final Collection<IMessageListener> messagesListeners = new ArrayList<IMessageListener>();


    //this is the object that contains the opened port
    private CommPortIdentifier selectedPortIdentifier = null;
    private SerialPort serialPort = null; 

    //input and output streams for sending and receiving data
    private InputStream input = null;
    private OutputStream output = null;
    private String accu = "" ;

    //just a boolean flag that i use for enabling
    //and disabling buttons depending on whether the program
    //is connected to a serial port or not
    private boolean bConnected = false;

    //the timeout value for connecting with the port
    final static int TIMEOUT = 2000;

    //some ascii values for for certain things
    final static int SPACE_ASCII = 32;
    final static int DASH_ASCII = 45;
    final static int NEW_LINE_ASCII = 10;

    //a string for recording what goes on in the program
    //this string is written to the GUI
    String logText = "";

    //search for all the serial ports
    //pre: none
    //post: adds all the found ports to a combo box on the GUI
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public HashMap searchForPorts()
    {
        ports = CommPortIdentifier.getPortIdentifiers();

        while (ports.hasMoreElements())
        {
            CommPortIdentifier curPort = (CommPortIdentifier)ports.nextElement();

            //get only serial ports
            if (curPort.getPortType() == CommPortIdentifier.PORT_SERIAL)
            {
                //window.cboxPorts.addItem(curPort.getName());
                portMap.put(curPort.getName(), curPort);
            }
        }
        
        return portMap ;
    }

    //connect to the selected port in the combo box
    //pre: ports are already found by using the searchForPorts method
    //post: the connected comm port is stored in commPort, otherwise,
    //an exception is generated
    public String connect(String selectedPort) throws CommunicationUSBException
    {
        ports = CommPortIdentifier.getPortIdentifiers();

        while (ports.hasMoreElements())
        {
            CommPortIdentifier curPort = (CommPortIdentifier)ports.nextElement();

            //get only serial ports
            if (curPort.getPortType() == CommPortIdentifier.PORT_SERIAL)
            {
                //window.cboxPorts.addItem(curPort.getName());
                portMap.put(curPort.getName(), curPort);
            }
        }
        selectedPortIdentifier = (CommPortIdentifier)portMap.get(selectedPort);

        CommPort commPort = null;

        try
        {
            //the method below returns an object of type CommPort
            commPort = selectedPortIdentifier.open("TigerControlPanel", TIMEOUT);
            //the CommPort object can be casted to a SerialPort object
            serialPort = (SerialPort)commPort;
            serialPort.setSerialPortParams( 9600,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE );
            //for controlling GUI elements
            setConnected(true);

            //logging
            logText = selectedPort + " opened successfully.";
            
        }
        catch (PortInUseException e)
        {
            logText = selectedPort + " is in use. (" + e.toString() + ")";
            throw new CommunicationUSBException(logText) ;
        }
        catch (Exception e)
        {
            logText = "Failed to open " + selectedPort + "(" + e.toString() + ")";
            throw new CommunicationUSBException(logText) ;
        }
        return logText;
    }

    //open the input and output streams
    //pre: an open port
    //post: initialized intput and output streams for use to communicate data
    public boolean initIOStream()
    {
        //return value for whather opening the streams is successful or not
        boolean successful = false;

        try {
        	if (serialPort != null)
        	{
            //
            input = serialPort.getInputStream();
            output = serialPort.getOutputStream();
            writeData(0, 0);
        	} ;
            successful = true;
            
            return successful;
        }
        catch (IOException e) {
            logText = "I/O Streams failed to open. (" + e.toString() + ")";
//            window.txtLog.setForeground(Color.red);
//            window.txtLog.append(logText + "\n");
            return successful;
        }
    }

    //starts the event listener that knows whenever data is available to be read
    //pre: an open serial port
    //post: an event listener for the serial port that knows when data is recieved
    public void initListener()
    {
        try
        {
            if (serialPort != null)
            {
                serialPort.addEventListener(this);
                serialPort.notifyOnDataAvailable(true);
            }
        }
        catch (TooManyListenersException e)
        {
            logText = "Too many listeners. (" + e.toString() + ")";
//            window.txtLog.setForeground(Color.red);
//            window.txtLog.append(logText + "\n");
        }
    }

    //disconnect the serial port
    //pre: an open serial port
    //post: clsoed serial port
    public void disconnect()
    {
        //close the serial port
        try

        {
            if (serialPort == null)
                return ;
            writeData(0, 0);

            serialPort.removeEventListener();
            serialPort.close();
            input.close();
            output.close();
            setConnected(false);
//            window.keybindingController.toggleControls();

            logText = "Disconnected.";
//            window.txtLog.setForeground(Color.red);
//            window.txtLog.append(logText + "\n");
        }
        catch (Exception e)
        {
            logText = "Failed to close " + serialPort.getName() + "(" + e.toString() + ")";
 //           window.txtLog.setForeground(Color.red);
 //             window.txtLog.append(logText + "\n");
        }
    }

    final public boolean getConnected()
    {
        return bConnected;
    }

    public void setConnected(boolean bConnected)
    {
        this.bConnected = bConnected;
    }

   
    public void serialEvent(SerialPortEvent evt) {
        if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE)
        {
            try
            {
                byte singleData = (byte)input.read();

              
                if ((singleData != '\n') && (singleData != '\r'))
                {
                    logText = new String(new byte[] {singleData});
                    accu += logText ;
                  
                }
                else
                {
                  if (accu != "")
                	  this.firedNewMessageEvent(accu) ;
                  accu = "" ;
                }
            }
            catch (Exception e)
            {
                logText = "Failed to read data. (" + e.toString() + ")";
                e.printStackTrace();
               // window.txtLog.setForeground(Color.red);
               // window.txtLog.append(logText + "\n");
            }
        }
    }

    public void changeFeu(int numFeu, IConstantes.EColor couleur)
    {
        try
        {
        	output.write(numFeu) ;
	    	output.flush() ;
	    	Thread.sleep(100) ;
	    	if (couleur == IConstantes.EColor.RED)
	    	{
	    		
	    		output.write(0) ;
	    		output.flush() ;
	    		Thread.sleep(100) ;
	    	}
	    	else
	    	{
	    		output.write(1) ;
	    		output.flush() ;
	    	}
	    	
	    	
        }
	    catch (Exception e)
	    {
	        logText = "Failed to write data. (" + e.toString() + ")";
	       // window.txtLog.setForeground(Color.red);
	       // window.txtLog.append(logText + "\n");
	    }
    }
    
    //method that can be called to send data
    //pre: open serial port
    //post: data sent to the other device
    public void writeData(int leftThrottle, int rightThrottle)
    {
        try
        {
            output.write(leftThrottle);
            output.flush();
            //this is a delimiter for the data
            output.write(DASH_ASCII);
            output.flush();
            
            output.write(rightThrottle);
            output.flush();
            //will be read as a byte so it is a space key
            output.write(SPACE_ASCII);
            output.flush();
        }
        catch (Exception e)
        {
            logText = "Failed to write data. (" + e.toString() + ")";
          
        }
    }
    
    //// Methodes concernant les listeners
    public void addMessageListener(IMessageListener listener) {
    	messagesListeners.add(listener);
    }
 
    public void removeMessageListener(IMessageListener listener) {
    	messagesListeners.remove(listener);
    }
 
    public IMessageListener[] getMessageListeners() {
        return messagesListeners.toArray(new IMessageListener[0]);
    }
    
    private void firedNewMessageEvent(String msg)
    {
    	MessageEvent evt = new MessageEvent(msg) ;
    	for(IMessageListener listener : this.messagesListeners)
    		listener.newMessage(evt) ;
    }
    
    public String getSerialPort()
    {
    	return this.serialPort.getName() ;
    }
}
