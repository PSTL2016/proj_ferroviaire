package upmc.train.model.communication;

import java.io.IOException;

import gnu.io.SerialPortEvent;
import upmc.train.constantes.IConstantes;
import upmc.train.model.Train;
import upmc.train.model.communication.exception.TrainCommandException;
import upmc.train.model.messages.IMessageListener;
import upmc.train.model.messages.MessageEvent;

public class CommunicationArduinoTotale extends CommunicationArduino 
{
	   public void changeFeu(int numFeu, IConstantes.EColor couleur)
	    {
		   byte[] message = new byte[4] ;
	        try
	        {
	        	message[0] = IConstantes.ECodeTypeMateriel.FEU.val ;// on indique le type de materiel
	        	message[1] = (byte) (numFeu) ; // on indique l'adresse du materiel
	        	message[2] = IConstantes.ECodeTypeCommande.SWITCH.val ; 
	        	//Calcul de la valeur
		    	if (couleur == IConstantes.EColor.RED)
		    	{
		    		
		    		message[3]  = 0 ;
		    	}
		    	else
		    	{
		    		message[3]  = 1 ;
		    	}
		    	output.write(message);
		    	output.flush(); //on envoie effectivement le message
		    	
	        }
		    catch (Exception e)
		    {
		    	System.out.println("ERREUR : pas possible de changer le feu") ;
		    }
	    }
	    public void serialEvent(SerialPortEvent evt) {
	        if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE)
	        {
	            try
	            {
	                byte singleData = (byte)input.read();
	                logText = new String(new byte[] {singleData});
	                accu += logText ;
	               
	                if (accu.length() == 4) //Le protocol indique qu'un message fait 4 octets
	                {
	                	String tmp = accu ;
	                	accu = "" ;
	                	this.firedNewMessageEvent(tmp) ;
	                }
	            }
	            catch (Exception e)
	            {
	                e.printStackTrace();
	            }
	        }
	    }	
		   public void emergencyStop(Train train)
		   {	
			   byte[] message = new byte[4] ;
			   message[0] = IConstantes.ECodeTypeMateriel.TRAIN.val ;// on indique le type de materiel
			   message[1] = (byte) (Byte.parseByte(train.getAdresse())) ; // on indique l'adresse du materiel
			   message[2] = IConstantes.ECodeTypeCommande.EMMERGENCY.val ;
			   message[3]  = 0 ;
			   try {
					output.write(message);
					output.flush(); //on envoie effectivement le message
			   } catch (IOException e) {
					
					e.printStackTrace();
			   }
		    	
		   }
		 
		    public void setSpeed(Train train, int speed) throws TrainCommandException
		    {
				   byte[] message = new byte[4] ;
				   message[0] = IConstantes.ECodeTypeMateriel.TRAIN.val ;// on indique le type de materiel
				   message[1] = (byte) (Byte.parseByte(train.getAdresse())) ; // on indique l'adresse du materiel
				   message[2] = IConstantes.ECodeTypeCommande.VITESSE.val ;
				   byte direction ;
				   if (train.getDirection() == IConstantes.EDirection.FORWARD)
					   direction = 0 ;
				   else
					   direction = (byte)0x80 ;
				   message[3]  = (byte)(((byte)speed) | direction) ;
				   try {
						output.write(message);
						output.flush(); //on envoie effectivement le message
				   } catch (IOException e) {
						
						e.printStackTrace();
				   }						    	
		    }
		    
		    public void reverse(Train train) throws TrainCommandException
		    {
				   byte[] message = new byte[4] ;
				   message[0] = IConstantes.ECodeTypeMateriel.TRAIN.val ;// on indique le type de materiel
				   message[1] = (byte) (Byte.parseByte(train.getAdresse())) ; // on indique l'adresse du materiel
				   message[2] = IConstantes.ECodeTypeCommande.VITESSE.val ;
				   byte direction ;
				   if (train.getDirection() == IConstantes.EDirection.FORWARD)
					   direction = 0 ;
				   else
					   direction = (byte)0x80 ;
				   message[3]  = (byte)(((byte)train.getVitesse()) | direction) ;
				   try {
						output.write(message);
						output.flush(); //on envoie effectivement le message
				   } catch (IOException e) {
						
						e.printStackTrace();
				   }					
		    }
		    
		    public void forward(Train train) throws TrainCommandException
		    {
				   byte[] message = new byte[4] ;
				   message[0] = IConstantes.ECodeTypeMateriel.TRAIN.val ;// on indique le type de materiel
				   message[1] = (byte) (Byte.parseByte(train.getAdresse())) ; // on indique l'adresse du materiel
				   message[2] = IConstantes.ECodeTypeCommande.VITESSE.val ;
				   byte direction ;
				   if (train.getDirection() == IConstantes.EDirection.FORWARD)
					   direction = 0 ;
				   else
					   direction = (byte)0x80 ;
				   message[3]  = (byte)(((byte)train.getVitesse()) | direction) ;
				   try {
						output.write(message);
						output.flush(); //on envoie effectivement le message
				   } catch (IOException e) {
						
						e.printStackTrace();
				   }				
		    }	
		    protected void firedNewMessageEvent(String msg)
		    {
		    	//le protocol ayant évolué on fait en sorte de renvoyé la bonne information
		    	//msg est la chaine contenant 4 octets, celui qui nous inteeresse pour
		    	//le moment est la valeur du capteur (donc le dernier octet = msg[3])
		    	//on sait que c'est un capteur
		    	
		    	byte[] mbyte = msg.getBytes() ;
		    	
		    	MessageEvent evt = new MessageEvent("" + mbyte[3] ) ;
		    	for(IMessageListener listener : this.getMessageListeners())
		    		listener.newMessage(evt) ;
		    }		    
}
