package upmc.train.controller.model.communication;

import java.util.ArrayList;
import java.util.HashMap;

import upmc.train.constantes.IConstantes.EColor;
import upmc.train.constantes.IConstantes.EDirection;
import upmc.train.controller.NetController;
import upmc.train.controller.PCFEncoder;
import upmc.train.model.Train;
import upmc.train.model.communication.ICommunication;
import upmc.train.model.communication.NetMonitor;
import upmc.train.model.communication.exception.TrainCommandException;
import upmc.train.model.messages.IMessageListener;
import upmc.train.model.messages.MessageEvent;

public class NetMonitorPCF extends NetMonitor implements ICommunication, IMessageListener
{
	
	protected ArrayList<CommunicationArduinoPCF> comUSB = new ArrayList<CommunicationArduinoPCF>() ;
	protected HashMap<String,ThreadWiThrottlePCF> comCircuit = new HashMap<String,ThreadWiThrottlePCF>() ;
	//initialisation
	public NetMonitorPCF()
	{ 
		
	}

	
	public NetMonitorPCF(int port, String adresse)
	{
		this.portWiThrottle = port ;
		this.adresseWiThrottle = adresse ;
	}	
	
	public void simulateMessage(int num)
	{
		for(ICommunication com : comUSB)
		{
			((CommunicationArduinoPCF)com).simulateMessage(num);
		}
	}
	
	//mise en place des elements de communication
	public void addNewArduino(String port)
	{
		CommunicationArduinoPCF com = new CommunicationArduinoPCF() ;
		//try {
			//com.connect(port) ;
			this.comUSB.add(com) ;
			com.addMessageListener(this);
		//} 
		//catch (CommunicationUSBException e) {
		//	System.out.println(e.getMessage());
		//}

	}
	
	public void removeArduino(String port)
	{
		CommunicationArduinoPCF toRemove = null ;
		for(CommunicationArduinoPCF ca : this.comUSB)
		{
			if (ca.getSerialPort().equals(port))
				toRemove = ca ;
		}
		if (toRemove != null)
		{
			toRemove.removeMessageListener(this);
			this.comUSB.remove(toRemove) ;
		}
	}
	
	public void removeTrain(String adresseTrain)
	{
		if (this.comCircuit.containsKey(adresseTrain))
			this.comCircuit.remove(adresseTrain) ;
	}
	
	public void addNewTrain(String adresseTrain)
	{
		
		this.comCircuit.put(adresseTrain, new ThreadWiThrottlePCF(this.adresseWiThrottle,this.portWiThrottle, adresseTrain)) ;
	}

	public void setPortWiThrottle(int portWiThrottle) {
		this.portWiThrottle = portWiThrottle;
	}

	public void setAdresseWiThrottle(String adresseWiThrottle) {
		this.adresseWiThrottle = adresseWiThrottle;
	}

	@Override
	public void changeFeu(int numFeu, EColor couleur) 
	{
		for(CommunicationArduinoPCF ca : this.comUSB)
		{
			ca.changeFeu(numFeu, couleur);
		}
	}
	@Override
	public void changeAiguillage(String id, String position) {
		for(CommunicationArduinoPCF ca : this.comUSB)
		{
			ca.changeAiguillage(id, position);
		}
	}
    //traitement de l'ecoute des messages series
    public void addMessageListener(IMessageListener listener) {
    	messagesListeners.add(listener);
    }
 
    public void removeMessageListener(IMessageListener listener) {
    	messagesListeners.remove(listener);
    }
 
    public IMessageListener[] getMessageListeners() {
        return messagesListeners.toArray(new IMessageListener[0]);
    }
    
    private void firedNewMessageEvent(String msg)
    {
    	MessageEvent evt = new MessageEvent(msg) ;
    	for(IMessageListener listener : this.messagesListeners)
    		listener.newMessage(evt) ;
    }
	public void newMessage(MessageEvent evt) 
	{
		this.firedNewMessageEvent(evt.getMessage());
		
	}
	
	//traitement de l'emission des messages vers les locos
    synchronized public void  setMessage(String train, String msg)
    {
    	this.comCircuit.get(train).setMessage(msg);
    }
    
    public void stopWT(Train train)
    {
    	this.comCircuit.get(train.getAdresse()).stopWT() ;
    }
    
    public void emergencyStop(Train train)
    {	
    	if (this.comCircuit.containsKey(train.getAdresse()))
    		this.comCircuit.get(train.getAdresse()).emergencyStop();
    }
 
    public void setSpeed(Train train, int speed) throws TrainCommandException
    {
    	if (speed > 126)
    		throw new TrainCommandException("Speed over maximum (126)") ;
    	if (speed < 0)
    		throw new TrainCommandException("Speed under minimum (0)") ;
    	if (!this.comCircuit.containsKey(train.getAdresse()))
    		throw new TrainCommandException("this train is not registered") ;
    	this.comCircuit.get(train.getAdresse()).setSpeed(speed) ;
    }

	public void addNetworkToArduinos(NetController network) {
		for(CommunicationArduinoPCF com : this.comUSB)
		{
			com.setEncoder(network.getEncoder()) ;
		}
		
		
	}
  
 

	public void setEncoderForTrain(String text, PCFEncoder encoder) {
		//int trainAddress = Integer.parseInt(text) ;
		ThreadWiThrottlePCF t = this.comCircuit.get(text) ;
		t.setEncoder(encoder);
	}
    
    public void reverse(Train train) throws TrainCommandException
    {
    	if (!this.comCircuit.containsKey(train.getAdresse()))
    		throw new TrainCommandException("this train is not registered") ;
    	this.comCircuit.get(train.getAdresse()).setDirection(EDirection.BACKWARD);
    }
    
    public void forward(Train train) throws TrainCommandException
    {
    	if (!this.comCircuit.containsKey(train.getAdresse()))
    		throw new TrainCommandException("this train is not registered") ;
    	this.comCircuit.get(train.getAdresse()).setDirection(EDirection.FORWARD);
    }

}
