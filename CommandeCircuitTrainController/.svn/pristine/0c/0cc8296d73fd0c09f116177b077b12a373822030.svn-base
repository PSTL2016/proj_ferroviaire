package upmc.train.controller.ihm;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.HashMap;

import javax.swing.JPanel;

import upmc.train.constantes.IConstantes.EColor;
import upmc.train.controller.model.Controller;
import upmc.train.model.Canton;
import upmc.train.model.Light;
import upmc.train.model.Topography;
import upmc.train.model.Train;
import upmc.utils.mvc.IUpdate;


/**
 * @author brunolesueur
 *Cette classe nous permet d'afficher un panneau synthétique 
 *représentant le circuit ferroviere
 */
/**
 * @author brunolesueur
 *
 */
public class PanelSynoptique extends JPanel implements IUpdate
{
	
	private static final long serialVersionUID = 1L;

	
	private int nombreCantons = 2 ;
	private Topography topography ;;
	private HashMap<Rectangle,Light> positionFeux = new HashMap<Rectangle,Light>() ;
	
	private int distance = 100 ;
	@SuppressWarnings("unused")
	private BufferedImage image = null ;
	private Controller control ;
	private PanelSynoptiqueControler listener ;
	
	public void setControl(Controller control) {
		this.control = control;
		this.listener.setModel(control);
	}

	/**
	 * @param x coordonnee X
	 * @param y coordonnee Y
	 * @return retourne le feu associé à cette coordonnées ou bien
	 * null si il n'y a pas de feu
	 */
	public Light getLightByPosition(int x, int y)
	{
		for(Rectangle r : this.positionFeux.keySet())
		{
			if (r.contains(x, y))
			{
				return this.positionFeux.get(r) ;
			}
		}
		return null ;
	}

	/**
	 * @param nbCantons : nombre de cantons à représenter, le controleur qui permet de 
	 * faire évoluer le train
	 * @param control
	 */
	public PanelSynoptique(int nbCantons)
	{
		super() ;
		
		listener = new PanelSynoptiqueControler(this) ;
		this.nombreCantons = nbCantons ;
		this.init(nbCantons);
		
	}
	
	/**
	 * @param feu : numero du feu impliqué
	 * @param couleur : couleur à mettre sur le feu
	 */
	public void setNewState(int feu, EColor couleur)
	{
		
		this.invalidate();
		this.repaint() ;
		
	}

	/**
	 * initialise l'affichage avec le nombre de cantons de la classe
	 */
	public void init()
	{
		this.init(this.nombreCantons) ;
	}
	
	/**
	 * initialise l'affichage avec le nombre de cantons de la classe
	 * @param nbCantons : nombre de cantons à afficher
	 */
	public void init(int nbCantons)
	{        
		this.invalidate() ;
		this.repaint() ;
	}	
	
	/**
	 * Dessine les feux sur les cantons
	 * @param g : context graphique
	 */
	private void dessineFeux(Graphics g )
	{
		int i = 0; 
		this.positionFeux.clear();
		for (Canton canton : this.topography.getGlobalListCanton())
		{

				Light l = canton.getLight();
				
				if (l != null)
				{		
					
					g.setColor(Color.black) ;
					g.fillRect(15  + (i * distance), 30, 16 , 32 ) ;	
					this.positionFeux.put(new Rectangle(15  + (i * distance), 30, 16 , 32), l) ;
					if (l.getColorAsString().equals("red"))
					{
						g.setColor(Color.RED) ;
						g.fillOval(15  + 8 - 3 + (i * distance), 30 + 8 - 3, 6, 6) ;
						g.setColor(Color.green) ;
						g.drawOval(15  + 8 - 3 + (i * distance), 30 + 8 + 16 - 3, 6, 6) ;					
					}
					else
					{
						g.setColor(Color.RED) ;
						g.drawOval(15  + 8 - 3 + (i * distance), 30 + 8 - 3, 6, 6) ;
						g.setColor(Color.green) ;
						g.fillOval(15  + 8 - 3 + (i * distance), 30 + 8 + 16 - 3, 6, 6) ;					
					}
				}
			i++ ;
		}
		
	}
	
	/* (non-Javadoc)
	 * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
	 */
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);	
		
		g.setColor(Color.black) ;
		//g.fillRect(10, 10, 50, 50) ;
		int i = 0; 
		if (this.topography != null)
		{
			this.distance = this.getWidth() / (this.topography.getGlobalListCanton().size()) ;
			for (Canton c : this.topography.getGlobalListCanton())
			{
				if (c.getType().equals("gare"))
					g.setColor(Color.cyan);
				else
					g.setColor(Color.black) ;
				g.fillOval(5 - 3 + (i * distance), 20, 6,6 ) ;
				g.setColor(Color.black) ;
				g.drawLine(5 + (i * distance), 20, 5 + ((i + 1) * distance), 20) ;
				g.drawChars(c.getNom().toCharArray(),0,c.getNom().length(),  (i * distance), 15) ;
				Train tr =  this.control.getTrainOn(c.getNom());
				if (tr != null)
					g.drawChars(tr.toString().toCharArray(), 0, tr.toString().length(),(distance / 2)  + (i * distance), 15) ;	
				i++;
				
			}
			this.dessineFeux(g);
		}
	}

	/* (non-Javadoc)
	 * @see upmc.utils.mvc.IUpdate#updateMVC(java.lang.Object)
	 */
	@Override
	public void updateMVC(Object o) 
	{
		this.invalidate();
		this.repaint();
	}
	public void updateTopography(Topography topo) {
		this.topography = topo;
		this.init(topo.getGlobalListCanton().size());
		
	}

}
